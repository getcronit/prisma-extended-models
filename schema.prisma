// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id

    courses      Course[]
    subscription UserSubscription?
}

model Course {
    id        String     @id @default(uuid())
    title     String
    documents Document[]

    userId String
    User   User   @relation(fields: [userId], references: [id])
}

model Document {
    id       String @id @default(uuid())
    courseId String
    title    String

    contentId String?
    // Content array
    content   DocumentContent[]

    // Define the relationship with the Course model
    course Course @relation(fields: [courseId], references: [id])

    readTime       Float                 @default(0)
    progress       Int                   @default(0)
    markedFinished Boolean               @default(false)
    status         DocumentContentStatus @default(DRAFT)

    fileId String @default("")

    createdAt DateTime @default(now())

    documentProcessings DocumentProcessing[]
}

model DocumentProcessing {
    id String @id @default(uuid())

    document   Document @relation(fields: [documentId], references: [id])
    documentId String

    audioAvailable Boolean @default(false)
    audioTokenCost Int?
    tokenCost      Int     @default(0)

    status DocumentContentStatus?
    error  String?
}

model DocumentChat {
    id String @id @default(uuid())

    messages DocumentChatMessage[]

    documentContent   DocumentContent @relation(fields: [documentContentId], references: [id])
    documentContentId String          @unique
}

model DocumentChatMessage {
    id String @id @default(uuid())

    text     String
    response String

    chat   DocumentChat @relation(fields: [chatId], references: [id])
    chatId String

    createdAt DateTime @default(now())
}

model DocumentContent {
    id String @id @default(uuid())

    title    String
    text     String
    progress Int    @default(0)

    ttsUrl String?

    images DocumentContentImage[]

    glossaryTerms GlossaryTerm[]
    document      Document       @relation(fields: [documentId], references: [id])
    documentId    String
    exam          Exam?

    chat DocumentChat?

    createdAt DateTime @default(now())
}

model DocumentContentImage {
    id String @id @default(uuid())

    url      String
    thumbUrl String?

    content   DocumentContent @relation(fields: [contentId], references: [id])
    contentId String
}

model Exam {
    id String @id @default(uuid())

    questions ExamQuestion[]

    content   DocumentContent @relation(fields: [contentId], references: [id])
    contentId String          @unique
}

model GlossaryTerm {
    id String @id @default(uuid())

    term       String
    definition String
    content    DocumentContent @relation(fields: [contentId], references: [id])
    contentId  String
}

model ExamQuestion {
    id String @id @default(uuid())

    question    String
    answers     ExamQuestionAnswer[]
    exam        Exam                 @relation(fields: [examId], references: [id])
    examId      String
    hasSkipped  Boolean              @default(false)
    hasAnswered Boolean              @default(false)
}

model ExamQuestionAnswer {
    id String @id @default(uuid())

    answer         String
    isCorrect      Boolean
    examQuestion   ExamQuestion @relation(fields: [examQuestionId], references: [id])
    examQuestionId String

    isSelected Boolean @default(false)
}

model BetaToken {
    id String @id @default(uuid())

    claimedBy String?
}

model UserToken {
    id String @id @default(uuid())

    userId String @unique
    amount Int    @default(0)
}

model UserTokenTransaction {
    id String @id @default(uuid())

    userId    String
    amount    Int
    type      UserTokenTransactionType
    createdAt DateTime                 @default(now())

    UserSubscription   UserSubscription? @relation(fields: [userSubscriptionId], references: [id])
    userSubscriptionId String?
    UserPayment        UserPayment?      @relation(fields: [userPaymentId], references: [id])
    userPaymentId      String?
}

model UserSubscription {
    id String @id @default(uuid())

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    stripeCustomerId       String   @unique
    stripeSubscriptionId   String   @unique
    stripePriceId          String
    stripeCurrentPeriodEnd DateTime

    transactions UserTokenTransaction[]
}

model UserPayment {
    id String @id @default(uuid())

    userId String

    stripePaymentIntentId String @unique
    stripeInvoiceId       String @unique
    stripePriceId         String

    transactions UserTokenTransaction[]

    createdAt DateTime @default(now())
}

model Customer {
    id String @id @default(uuid())

    userId String @unique

    stripeCustomerId String @unique
}

enum UserTokenTransactionType {
    CONSUMPTION // When tokens are consumed (e.g. when a user requests to process a document)
    PURCHASE // When tokens are purchased (e.g. when a user buys tokens)
    REFUND // When tokens are refunded (e.g. when a user cancels a purchase)
}

// Different statuses for the content of a document
enum DocumentContentStatus {
    DRAFT // The document has been uploaded but not yet processed
    PROCESSING // The document is being processed
    STUCK // The document is stuck in processing
    FAILED // The document failed to be processed
    COMPLETED // The document has been processed and is ready to be used
}
